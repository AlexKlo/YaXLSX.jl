var documenterSearchIndex = {"docs":
[{"location":"pages/content/#Types","page":"API Reference","title":"Types","text":"","category":"section"},{"location":"pages/content/","page":"API Reference","title":"API Reference","text":"YaXLSX.XLSX\nYaXLSX.Sheet\nYaXLSX.RowTable\nYaXLSX.ColumnTable","category":"page"},{"location":"pages/content/#YaXLSX.XLSX","page":"API Reference","title":"YaXLSX.XLSX","text":"XLSX\n\nStructure with the contents of the XLSX file returned by the parse_xlsx function.\n\nFields\n\nworkbook::Workbook: XLSX file content.\nsheets::Vector{Sheet}: vector of book sheets.\nshared_strings::Union{Nothing,sharedStrings}: shared strings content.\n\nAccessors\n\nxl_sheets(xl_book::XLSX) -> xl_book.sheets\n\n\n\n\n\n","category":"type"},{"location":"pages/content/#YaXLSX.Sheet","page":"API Reference","title":"YaXLSX.Sheet","text":"Sheet\n\nStructure with the contents of the book sheets contained in XLSX structure.\n\nFields\n\nsheetData::Rows: sheet data.\ntable::Union{Nothing, Matrix}: sheet data in matrix form.\nname::Union{Nothing, String}: sheet name.\n\n\n\n\n\n","category":"type"},{"location":"pages/content/#YaXLSX.RowTable","page":"API Reference","title":"YaXLSX.RowTable","text":"RowTable <: AbstractVector{<:NamedTuple}\n\nTabular data type that accepts NamedTuple vector and implements a row table.\n\n\n\n\n\n","category":"type"},{"location":"pages/content/#YaXLSX.ColumnTable","page":"API Reference","title":"YaXLSX.ColumnTable","text":"ColumnTable <: NamedTuple\n\nTabular data type that accepts NamedTuple and implements a column table.\n\n\n\n\n\n","category":"type"},{"location":"pages/content/#Parsing","page":"API Reference","title":"Parsing","text":"","category":"section"},{"location":"pages/content/","page":"API Reference","title":"API Reference","text":"YaXLSX.parse_xlsx","category":"page"},{"location":"pages/content/#YaXLSX.parse_xlsx","page":"API Reference","title":"YaXLSX.parse_xlsx","text":"parse_xlsx(x::AbstractString) -> XLSX\nparse_xlsx(x::Vector{UInt8}) -> XLSX\n\nParse a XLSX file into a structure of type XLSX.\n\nExamples\n\njulia> xl_book = parse_xlsx(xlsx_simple_table())\nXLSX with 1 sheet\n\n\n\n\n\n","category":"function"},{"location":"pages/content/#Book-interfaces","page":"API Reference","title":"Book interfaces","text":"","category":"section"},{"location":"pages/content/","page":"API Reference","title":"API Reference","text":"YaXLSX.xl_sheetnames\nYaXLSX.xl_sheets","category":"page"},{"location":"pages/content/#YaXLSX.xl_sheetnames","page":"API Reference","title":"YaXLSX.xl_sheetnames","text":"xl_sheetnames(xl_book::XLSX)\n\nGet a list of all Sheet names in a book.\n\njulia> xl_book = parse_xlsx(xlsx_two_sheets_table())\nxXLSX with 2 sheets\n\njulia> xl_sheetnames(xl_book)\n2-element Vector{String}:\n \"Sheet1\"\n \"Sheet2\"\n\n\n\n\n\n","category":"function"},{"location":"pages/content/#YaXLSX.xl_sheets","page":"API Reference","title":"YaXLSX.xl_sheets","text":"xl_sheets(xl_book::XLSX) -> Vector{Sheet}\nxl_sheets(xl_book::XLSX, keys_set::Vector{String}) -> Vector{Sheet}\nxl_sheets(xl_book::XLSX, keys_set::UnitRange{Int64}) -> Vector{Sheet}\nxl_sheets(xl_book::XLSX, key::String) -> Sheet\nxl_sheets(xl_book::XLSX, key::Int64) -> Sheet\n\nGet a Sheet or Vector{Sheet} by key or set of keys.\n\njulia> xl_book = parse_xlsx(xlsx_two_sheets_table())\nxXLSX with 2 sheets\n\njulia> xl_sheets(xl_book)\n2-element Vector{Sheet}:\n Sheet(\"Sheet1\")\n Sheet(\"Sheet2\")\n\njulia> xl_sheets(xl_book, [\"Sheet1\", \"Sheet2\"])\n2-element Vector{Sheet}:\n Sheet(\"Sheet1\")\n Sheet(\"Sheet2\")\n\njulia> xl_sheets(xl_book, 1:2)\n2-element Vector{Sheet}:\n Sheet(\"Sheet1\")\n Sheet(\"Sheet2\")\n\njulia> xl_sheets(xl_book, \"Sheet1\")\nSheet(\"Sheet1\")\n\njulia> xl_sheets(xl_book, 1)\nSheet(\"Sheet1\")\n\n\n\n\n\n","category":"function"},{"location":"pages/content/#Sheet-interfaces","page":"API Reference","title":"Sheet interfaces","text":"","category":"section"},{"location":"pages/content/","page":"API Reference","title":"API Reference","text":"YaXLSX.xl_rowtable\nYaXLSX.xl_columntable","category":"page"},{"location":"pages/content/#YaXLSX.xl_rowtable","page":"API Reference","title":"YaXLSX.xl_rowtable","text":"xl_rowtable(sheet::Sheet, s::Union{UnitRange, AbstractString}; column_labels=nothing) -> RowTable\nxl_rowtable(sheet::Sheet; column_labels=nothing) -> RowTable\n\nGet a RowTable from Sheet by cells or columns range.\n\nxl_book = parse_xlsx(xlsx_two_sheets_table())\n\nxl_sheet = xl_sheets(xl_book, 2)\n\njulia> xl_rowtable(xl_sheet, \"A1:C3\")\n3-element Vector{NamedTuple}:\n (A = \"Numbers\", B = \"Names\", C = nothing)\n (A = 1.0, B = \"a\", C = nothing)\n (A = 2.0, B = \"b\", C = nothing)\n\njulia> xl_rowtable(xl_sheet, \"B:C\"; column_labels=[\"c1\", \"c2\"])\n8-element Vector{NamedTuple}:\n (c1 = \"Names\", c2 = nothing)\n (c1 = \"a\", c2 = nothing)\n (c1 = \"b\", c2 = nothing)\n (c1 = \"c\", c2 = nothing)\n (c1 = \"d\", c2 = false)\n (c1 = \"e\", c2 = \"D8\")\n (c1 = nothing, c2 = \"D8/0\")\n (c1 = nothing, c2 = nothing)\n\n\n\n\n\n","category":"function"},{"location":"pages/content/#YaXLSX.xl_columntable","page":"API Reference","title":"YaXLSX.xl_columntable","text":"xl_columntable(sheet::Sheet, s::Union{UnitRange, AbstractString}; column_labels=nothing) -> ColumnTable\nxl_columntable(sheet::Sheet; column_labels=nothing) -> ColumnTable\n\nGet a ColumnTable from Sheet by cells or columns range.\n\nxl_book = parse_xlsx(xlsx_two_sheets_table())\n\nxl_sheet = xl_sheets(xl_book, 2)\n\njulia> xl_columntable(xl_sheet, \"1:2\")\n(\n    A = Any[\"Numbers\", 1.0, 2.0, 3.0, 4.0, 5.0, nothing, nothing], \n    B = Any[\"Names\", \"a\", \"b\", \"c\", \"d\", \"e\", nothing, nothing]\n)\n\njulia> xl_columntable(xl_sheet, 3:4; column_labels=[\"C_col\", \"D_col\"])\n(\n    C_col = Any[nothing, nothing, nothing, nothing, false, \"D8\", \"D8/0\", nothing], \n    D_col = Any[nothing, nothing, nothing, nothing, nothing, nothing, nothing, 100.0]\n)\n\n\n\n\n\n","category":"function"},{"location":"#YaXLSX.jl","page":"Home","title":"YaXLSX.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"YaXLSX package helps to read .xlsx files and construct tables for data processing.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install YaXLSX, simply use the Julia package manager:","category":"page"},{"location":"","page":"Home","title":"Home","text":"] add YaXLSX","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The following is an example of how you can parse data from .xlsx file, retrieve sheet information, and create tabular data.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using YaXLSX\n\njulia> xl_book = parse_xlsx(xlsx_simple_table())\nXLSX with 1 sheet\n\njulia> xl_sheetnames(xl_book)\n1-element Vector{String}:\n \"Sheet1\"\n\njulia> xl_sheet = xl_sheets(xl_book, \"Sheet1\")\nSheet(\"Sheet1\")\n\njulia> xl_rowtable(xl_sheet, \"A1:B6\")\n6-element Vector{NamedTuple{(:A, :B)}}:\n (A = \"Numbers\", B = \"Names\")\n (A = 1.0, B = \"a\")\n (A = 2.0, B = \"b\")\n (A = 3.0, B = \"c\")\n (A = 4.0, B = \"d\")\n (A = 5.0, B = \"e\")\n\njulia> xl_columntable(xl_sheet, \"1:2\"; column_labels=[\"column1\", \"column2\"])\n(\n    column1 = Any[\"Numbers\", 1.0, 2.0, 3.0, 4.0, 5.0], \n    column2 = Any[\"Names\", \"a\", \"b\", \"c\", \"d\", \"e\"]\n)","category":"page"},{"location":"","page":"Home","title":"Home","text":"It is also possible to convert tabular data into a DataFrame using DataFrames.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"using DataFrames\n\nusing YaXLSX\n\njulia> xl_rowtable(xl_sheets(parse_xlsx(xlsx_simple_table()), 1)) |> DataFrame\n6×2 DataFrame\n Row │ A        B\n     │ Any      String\n─────┼─────────────────\n   1 │ Numbers  Names\n   2 │ 1.0      a\n   3 │ 2.0      b\n   4 │ 3.0      c\n   5 │ 4.0      d\n   6 │ 5.0      e","category":"page"},{"location":"","page":"Home","title":"Home","text":"Another feature is that you can use Serde.jl to serialize data, for example to XML format","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Serde\n\nusing YaXLSX\n\nxl_sheet = xl_sheets(parse_xlsx(xlsx_simple_table()), 1)\n\njulia> to_xml(xl_sheet.sheetData) |> print\n<xml>\n  <row r=\"1\">\n    <c t=\"s\" r=\"A1\" s=\"1\">\n      <v>0</v>\n    </c>\n    <c t=\"s\" r=\"B1\" s=\"2\">\n      <v>1</v>\n    </c>\n  </row>\n  <row r=\"2\">\n    <c r=\"A2\" s=\"3\">\n      <v>1</v>\n    </c>\n    <c t=\"s\" r=\"B2\" s=\"2\">\n      <v>2</v>\n    </c>\n  </row>\n    ...\n</xml>","category":"page"}]
}
